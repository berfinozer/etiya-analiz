SELECT categoryid, COUNT(*) AS ProductCount FROM      Products GROUP BY  CategoryID;
SELECT  ProductName, UnitPrice FROM  Products ORDER BY UnitPrice DESC LIMIT 5;
SELECt SupplierID, AVG(UnitPrice) AS AveragePrice FROM  Products GROUP BY  SupplierID;
Select categoryid, AVG (Unitprice) AS AveragePrice From Products Where unitprice > 100 Group by categoryid; 
SELECT *, (UnitPrice * Quantity) AS TotalSales FROM [Order Details] WHERE (UnitPrice * Quantity) > 1000;
Select orderid, customerid, shippeddate,  shipvia From Orders where shippeddate is not NULL order by shippeddate desc limit 10;
SELECT AVG(UnitPrice) AS AveragePrice FROM Products;
SELECT  SUM (UnitsInStock) AS TotalStock FROM Products WHERE UnitPrice > 50; 
SELECT MIN(OrderDate) AS EarliestOrderDate FROM Orders;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName, strftime('%Y', 'now') - strftime('%Y', HireDate) AS YearsWorked FROM Employees;
SELECT OrderID, ROUND(SUM(UnitPrice), 2) AS TotalUnitPrice FROM   [Order Details] GROUP BY   OrderID;
SELECT COUNT(*) AS NumberOfProductsInStock FROM  Products WHERE UnitsInStock > 0;
SELECT  MIN(UnitPrice) AS LowestPrice, MAX(UnitPrice) AS HighestPrice FROM  Products;
SELECT strftime('%Y', OrderDate) AS OrderYear, COUNT(*) AS OrderCount FROM Orders GROUP BY OrderYear;
SELECT CONCAT(FirstName, ' ', LastName) AS FullName FROM Employees;
SELECT City, LENGTH(City) AS CityNameLength FROM Customers;
SELECT ProductName, ROUND(UnitPrice, 2) AS RoundedPrice FROM Products;
SELECT COUNT(*) AS TotalOrders FROM Orders;
SELECT CategoryID, AVG(UnitPrice) AS AvgCategoryPrice FROM Products GROUP BY CategoryID;
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Orders)) AS UnshippedPercentage FROM Orders WHERE ShippedDate IS NULL;
SELECT productName, unitPrice, unitPrice * 1.1 AS '+%10' FROM Products ORDER BY unitPrice DESC LIMIT 1
SELECT ProductName, SUBSTRING(ProductName, 1, 3) AS FirstThreeChars FROM Products;
SELECT strftime('%Y', OrderDate) AS OrderYear,  strftime('%m', OrderDate) AS OrderMonth, COUNT(*) AS OrderCount FROM Orders GROUP BY OrderYear, OrderMonth;
SELECT OrderID, ROUND(SUM(UnitPrice * Quantity), 2) AS TotalOrderValue FROM [Order Details] GROUP BY OrderID;
SELECT SUM(UnitPrice) AS TotalPrice FROM Products WHERE UnitsInStock = 0;







